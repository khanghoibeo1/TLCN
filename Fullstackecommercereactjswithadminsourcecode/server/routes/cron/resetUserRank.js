const cron = require('node-cron');
const { Orders } = require('../../models/orders');
const { RecentView } = require('../../models/recentView');
const {User} = require('../../models/user'); 
const {Recommendation} = require('../../models/recommendation'); 
const {Product} = require('../../models/products.js'); // s·ª≠a ƒë∆∞·ªùng d·∫´n n·∫øu c·∫ßn
const {BatchCode} = require('../../models/batchCode');     // s·ª≠a ƒë∆∞·ªùng d·∫´n n·∫øu c·∫ßn
const openAI = require("../../helper/openai/openAI.js")
const {authenticateToken } = require("../../middleware/authenticateToken");  // ƒê·∫£m b·∫£o openAi.js ƒë∆∞·ª£c require ƒë√∫ng

const AI_USER_ID = process.env.AI_USER_ID; //AI_USER_ID=000000000000000000000000
const MAX_AI_QUESTIONS = Number(process.env.MAX_AI_QUESTIONS) || 5;

// Ch·∫°y v√†o 00:00 ng√†y 1 h√†ng th√°ng
cron.schedule('0 0 1 * *', async () => {
  try {
    console.log("Resetting all user ranks...");

    await User.updateMany({}, { rank: 'bronze' }); // ho·∫∑c 'unranked' n·∫øu c·∫ßn

    console.log("All user ranks have been reset.");
  } catch (error) {
    console.error("Failed to reset user ranks:", error);
  }
});

// Cron ch·∫°y m·ªói ƒë√™m l√∫c 00:00
cron.schedule('0 0 * * *', async () => {
  try {
    console.log("==> Start updating amountAvailable for all products");

    const today = new Date();
    const products = await Product.find({});

    for (const product of products) {
      let updated = false;

      for (const locationEntry of product.amountAvailable) {
        const locationId = locationEntry.locationId;

        const validBatches = await BatchCode.find({
          productId: product._id,
          locationId: locationId,
          status: 'delivered',
          expiredDate: { $gte: today },
        });

        const totalRemain = validBatches.reduce((sum, batch) => sum + batch.amountRemain, 0);

        if (locationEntry.quantity !== totalRemain) {
          locationEntry.quantity = totalRemain;
          updated = true;
        }
      }

      if (updated) {
        await product.save();
        console.log(`‚úÖ Updated amountAvailable for product: ${product.name}`);
      }
    }

    console.log("==> All products have been updated successfully");
  } catch (err) {
    console.error("‚ùå Error updating amountAvailable:", err);
  }
});

async function autoCancelPendingVNPayOrders() {
  try {
    console.log("üîÑ Checking for VNPAY pending orders older than 15 minutes...");

    const fifteenMinutesAgo = new Date(Date.now() - 10 * 60 * 1000);

    const orders = await Orders.find({
      status: 'pending',
      payment: 'VNPAY',
      createdAt: { $lte: fifteenMinutesAgo }
    });

    for (const order of orders) {
      for (const item of order.products) {
        const batch = await BatchCode.findById(item.batchId);
        if (batch) {
          batch.amountRemain += item.quantity;
          await batch.save();
        }

        const product = await Product.findById(item.productId);
        if (!product) continue;

        const locationIndex = product.amountAvailable.findIndex(
          a => a.locationId?.toString() === batch?.locationId?.toString()
        );

        if (locationIndex >= 0) {
          product.amountAvailable[locationIndex].quantity += item.quantity;
        }

        await product.save();
      }

      order.status = 'cancelled';
      await order.save();

      console.log(`‚ùå Auto-cancelled order ${order._id} due to timeout.`);
    }

    console.log("‚úÖ Auto-cancel process completed.");
  } catch (err) {
    console.error("‚ùå Error auto-cancelling orders:", err);
  }
}

cron.schedule('*/10 * * * *', autoCancelPendingVNPayOrders);

// H√†m ch·ª©a logic c·∫≠p nh·∫≠t
async function updateProductAvailability() {
  try {
    console.log("==> Start updating amountAvailable for all products");

    const today = new Date();
    // ƒê·ªÉ ƒë·∫£m b·∫£o today lu√¥n l√† ƒë·∫ßu ng√†y (00:00:00.000) c·ªßa m√∫i gi·ªù b·∫°n mu·ªën,
    // b·∫°n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh nh∆∞ sau n·∫øu c·∫ßn:
    // const today = new Date();
    // today.setHours(0, 0, 0, 0); // ƒê·∫∑t gi·ªù, ph√∫t, gi√¢y, mili gi√¢y v·ªÅ 0
    // console.log(`Today for query: ${today}`); // Log ƒë·ªÉ ki·ªÉm tra

    const products = await Product.find({});

    for (const product of products) {
      let updated = false;

      for (const locationEntry of product.amountAvailable) {
        const locationId = locationEntry.locationId;

        const validBatches = await BatchCode.find({
          productId: product._id,
          locationId: locationId,
          status: 'delivered',
          expiredDate: { $gte: today },
        });

        const totalRemain = validBatches.reduce((sum, batch) => sum + batch.amountRemain, 0);

        if (locationEntry.quantity !== totalRemain) {
          locationEntry.quantity = totalRemain;
          updated = true;
        }
      }

      if (updated) {
        await product.save();
        console.log(`‚úÖ Updated amountAvailable for product: ${product.name}`);
      }
    }

    console.log("==> All products have been updated successfully");
  } catch (err) {
    console.error("‚ùå Error updating amountAvailable:", err);
  }
}

// G·ªçi h√†m n√†y b·∫•t c·ª© l√∫c n√†o b·∫°n mu·ªën ch·∫°y
updateProductAvailability();


async function UpadateRecentView () {
  try {
    console.log("üîÑ ƒêang t·∫°o g·ª£i √Ω s·∫£n ph·∫©m t·ª´ AI...");

    // B∆∞·ªõc 1: L·∫•y to√†n b·ªô s·∫£n ph·∫©m
    const allProducts = await Product.find({}, "id name category subCategory season rating brand");

    // Format cho prompt ch∆∞a c√≥ rating v√† brand v√† season
    const productList = allProducts.map(p => ({
      id: p.id.toString(),
      name: p.name,
      category: p.category,
      subCategory: p.subCategory,
      season: p.season,
    }));

    const allViews = await RecentView.find({}).populate("viewedProducts.productId");

    for (const view of allViews) {
      const userId = view.userId;
      const viewed = view.viewedProducts
        .map(v => v.productId)
        .filter(Boolean)
        .slice(-30);

      const viewedList = viewed.map(p => ({
        id: p._id.toString(),
        name: p.name,
        category: p.category,
        subCategory: p.subCategory,
        season: p.season,
      }));

      const prompt = `
B·∫°n l√† h·ªá th·ªëng g·ª£i √Ω s·∫£n ph·∫©m cho ng∆∞·ªùi d√πng c·ªßa FRUITOPIA.

D∆∞·ªõi ƒë√¢y l√† danh s√°ch **to√†n b·ªô s·∫£n ph·∫©m** (g·ªçi l√† "T·∫≠p s·∫£n ph·∫©m"):
${JSON.stringify(productList)}

V√† d∆∞·ªõi ƒë√¢y l√† danh s√°ch **30 s·∫£n ph·∫©m ng∆∞·ªùi d√πng ƒë√£ xem g·∫ßn ƒë√¢y**:
${JSON.stringify(viewedList)}

H√£y ch·ªçn ra kho·∫£ng **50 s·∫£n ph·∫©m t·ª´ T·∫≠p s·∫£n ph·∫©m** m√† b·∫°n cho r·∫±ng ph√π h·ª£p nh·∫•t v·ªõi ng∆∞·ªùi d√πng n√†y, s·∫Øp x·∫øp theo m·ª©c ƒë·ªô li√™n quan t·ª´ cao ƒë·∫øn th·∫•p.

**Ch·ªâ tr·∫£ v·ªÅ m·∫£ng c√°c ID s·∫£n ph·∫©m (chu·ªói _id Mongo) theo ƒë√∫ng th·ª© t·ª±**, v√≠ d·ª•:
["665f13e2abc123", "665f1355def456", "665f19zz789999", ...]

Kh√¥ng c·∫ßn th√™m l·ªùi gi·∫£i th√≠ch.
      `.trim();

      const aiRes = await openAI.chat.completions.create({
        model: "gpt-3.5-turbo", // ho·∫∑c gpt-3.5-turbo n·∫øu b·∫°n d√πng b·∫£n r·∫ª h∆°n
        messages: [
          {
            role: "system",
            content: `B·∫°n l√† AI g·ª£i √Ω s·∫£n ph·∫©m theo h√†nh vi ng∆∞·ªùi d√πng.`
          },
          { role: "user", content: `${prompt}` }
        ],
        temperature: 0.7,
        max_tokens: 1500
      });

      if (
        aiRes &&
        aiRes.choices &&
        aiRes.choices.length > 0 &&
        aiRes.choices[0].message
      ) {
        rawText = aiRes.choices[0].message.content.trim();
      } else {
        console.error("‚ùå Kh√¥ng c√≥ ph·∫£n h·ªìi h·ª£p l·ªá t·ª´ OpenAI");
        continue; // b·ªè qua user n√†y, sang ng∆∞·ªùi ti·∫øp theo
      }

      let productIds;
      try {
        productIds = JSON.parse(rawText); // N·∫øu GPT tr·∫£ v·ªÅ m·∫£ng JSON h·ª£p l·ªá
        console.log(productIds)
      } catch (e) {
        // fallback: x·ª≠ l√Ω n·∫øu tr·∫£ v·ªÅ d·∫°ng ["id1", "id2"] nh∆∞ng l·ªói c√∫ ph√°p
        productIds = rawText
          .replace(/[\[\]"]/g, "")
          .split(",")
          .map(s => s.trim())
          .filter(Boolean);
      }

      // L∆∞u ho·∫∑c c·∫≠p nh·∫≠t v√†o Recommendation
      await Recommendation.findOneAndUpdate(
        { userId },
        {
          userId,
          recommendedProducts: productIds.slice(0, 50), // ch·ªâ gi·ªØ 50
        },
        { upsert: true, new: true }
      );

      console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t g·ª£i √Ω cho user ${userId}`);
    }

    console.log("üéØ Ho√†n t·∫•t c·∫≠p nh·∫≠t g·ª£i √Ω s·∫£n ph·∫©m.");
  } catch (err) {
    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t g·ª£i √Ω:", err.message);
  }
};

UpadateRecentView();
