import React, { useState, useEffect, useContext, useRef } from 'react';
import { io } from 'socket.io-client';
import EmojiPicker from 'emoji-picker-react'
import { MyContext } from '../../App';  // Import MyContext t·ª´ App.js
import { fetchDataFromApi, postData, postData2, putData } from "../../utils/api"
import { FaImage, FaPaperPlane, FaArrowLeft, FaSmile} from 'react-icons/fa';  // D√πng icon h√¨nh ·∫£nh v√† icon m≈©i t√™n g·ª≠i tin nh·∫Øn t·ª´ th∆∞ vi·ªán react-icons
import { TbRuler } from 'react-icons/tb';

function ClientChat() {
  const { user, isLogin } = useContext(MyContext); // Get user info and login status from MyContext
  const [isChatOpen, setIsChatOpen] = useState(false);
  const [isAI, setIsAI] = useState(null);           // null | true(ai) | false(admin)
  const [messages, setMessages] = useState([]);      // m·∫£ng tin nh·∫Øn
  const [message, setMessage] = useState('');        // input text
  const [image, setImage] = useState(null);          // file ·∫£nh
  const [admin, setAdmin] = useState(null);          // th√¥ng tin admin
  const socketRef = useRef(); 
  const [unreadCount, setUnreadCount] = useState(0);
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const messagesEndRef = useRef(null);
  
   useEffect(() => {
    fetchDataFromApi('/api/messages/admin-info')
      .then(info => {
        console.log(info)
        setAdmin(info)})
      .catch(console.error);
  }, []); 
  useEffect(() => {
    if (!isLogin) return;
    fetchDataFromApi('/api/messages/count/unread')
      .then(data => setUnreadCount(data.unreadCount))
      .catch(console.error);
  }, [isLogin]);

  useEffect(() => {
    if (!isLogin) return;
    socketRef.current = io(process.env.REACT_APP_API_URL, {
      query: { userId: user.userId }
    });

    socketRef.current.on("newMessage", newMsg => {
      // n·∫øu tin nh·∫Øn t·ª´ admin g·ª≠i t·ªõi client v√† h·ªôp chat ƒëang ƒë√≥ng
      if (['mainAdmin', 'storeAdmin','staff'].includes(newMsg.senderRole) && !isChatOpen) {
        setUnreadCount(c => c + 1);
      }
      // c·∫≠p nh·∫≠t message list (gi·ªØ nh∆∞ c≈©)
      setMessages(prev => [...prev, newMsg]);
    });

    socketRef.current.on("transfer_to_admin", () => {
      alert("AI ƒëang g·∫∑p v·∫•n ƒë·ªÅ. B·∫°n ƒë∆∞·ª£c chuy·ªÉn sang chat v·ªõi Admin");
      setIsAI(false);
    });

    return () => {
      socketRef.current.disconnect();
    };
  }, [user.userId, isLogin, isChatOpen]);

  useEffect(() => {
    setIsAI(null);
    setMessages([]);
    // // (t·ª± ƒë·ªông fetch l·∫°i admin-info cho user m·ªõi)
    // fetchDataFromApi('/api/messages/admin-info')
    //   .then(info => setAdmin(info))
    //   .catch(console.error);
  }, [user.userId]);
  useEffect(() => {
    if (isAI === false && admin) {
      // Chat v·ªõi admin
      fetchDataFromApi(`/api/messages/${admin._id}`)  
        .then(msgs => setMessages(msgs))
        .catch(console.error);
    } else if (isAI === true) {
      // Chat v·ªõi AI: c√≥ th·ªÉ l·∫•y history t·ª´ /api/messages/ai-id ho·∫∑c ko c·∫ßn
      fetchDataFromApi(`/api/messages/bot-history`)  // t√πy backend
        .then(msgs => setMessages(msgs))
        .catch(console.error);
    }
  }, [isAI, admin]);

  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages]);

  const handleSelectAdmin = () => {
    setIsAI(false);
    // ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc
    putData('/api/messages/count/mark-read', {})
      .then(() => setUnreadCount(0))
      .catch(console.error);
  };

  const toggleChat = () => {
    setIsChatOpen(o => !o);
  };

  // Send the message using POST /send/:id
  const handleSendMessage = async () => {
    if (!isLogin) {
      alert("B·∫°n ph·∫£i ƒëƒÉng nh·∫≠p m·ªõi ƒë∆∞·ª£c nh·∫Øn tin");
      return;
    }
    if (!message.trim() && !image) return;

    const formData = new FormData();
    formData.append("text", message);
    if (image) formData.append("image", image);

    console.log(Object.fromEntries(formData.entries()));

    try {
      let newMsg;
      if (isAI) {
        const res = await postData2(`/api/messages/sendBot`, formData);
        const { status, ok, data } = res;
        if (status === 400) {
          // thi·∫øu n·ªôi dung
          alert(data.error);
          return;
        }
        if (status === 403) {
          // h·∫øt l∆∞·ª£t h·ªèi AI
          alert(data.error);
          setIsAI(false);
          return;
        }
        if (!ok) {
          // l·ªói kh√°c
          alert(data.error || "C√≥ l·ªói x·∫£y ra, th·ª≠ l·∫°i sau.");
          return;
        }

        newMsg = data;
        
      } else {
        const res = await postData2(`/api/messages/send/${admin._id}`, formData);
        newMsg = res.data
        console.log(newMsg)
      }
      setMessages(prev => [...prev, newMsg]);
      socketRef.current.emit("sendMessage", newMsg);
      setMessage('');
      setImage(null);
    } catch (err) {
      console.error("Send error:", err);
    }
  };

  const onEmojiClick = (emojiObject) => {
    setMessage(msg => msg + emojiObject.emoji);
  };
  const handleImageUpload = e => {
    const file = e.target.files[0];
    if (file && file.type.startsWith("image/")) {
      setImage(file);
    } else {
      alert("Vui l√≤ng ch·ªçn file ·∫£nh.");
    }
  };

  // 6) Quay v·ªÅ ch·ªçn AI/Admin
  const handleBack = () => {
    setIsAI(null);
    setMessages([]);
    setIsChatOpen(false);
  };

  const isSameDay = (d1, d2) => {
    return (
      d1.getFullYear() === d2.getFullYear() &&
      d1.getMonth() === d2.getMonth() &&
      d1.getDate() === d2.getDate()
    );
  };

  const formatDateHeader = (date) => {
    const dd = String(date.getDate()).padStart(2, '0');
    const mm = String(date.getMonth() + 1).padStart(2, '0');
    const yyyy = date.getFullYear();
    return `${dd}/${mm}/${yyyy}`;
  };
  const formatTime = date => {
    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  };

  const initialAIGreeting = `Xin ch√†o! M√¨nh l√† tr·ª£ l√Ω AI c·ªßa b·∫°n t·∫°i FRUITOPIA. M√¨nh ƒëang ph√°t tri·ªÉn n√™n kh√¥ng ph·∫£i l√∫c n√†o c≈©ng ƒë√∫ng. 
  B·∫°n c√≥ th·ªÉ ph·∫£n h·ªìi ƒë·ªÉ gi√∫p m√¨nh c·∫£i thi·ªán t·ªët h∆°n.

  M√¨nh s·∫µn s√†ng gi√∫p b·∫°n v·ªõi c√¢u h·ªèi v·ªÅ ch√≠nh s√°ch v√† t√¨m ki·∫øm s·∫£n ph·∫©m. H√¥m nay b·∫°n c·∫ßn m√¨nh h·ªó tr·ª£ g√¨ h√¥ng?`;

  const initialAdminGreeting = "Admin s·∫Ω h·ªó tr·ª£ c√°c y√™u c·∫ßu c·ªßa b·∫°n.";

  return (
    <div>
      
      {isLogin && (
        <div
          onClick={toggleChat}
          style={{
            position:'fixed', bottom:'20px', right:'20px',
            backgroundColor:'#6A1B9A', color:'white', padding:10,
            borderRadius:'50%', fontSize:24, cursor:'pointer', zIndex:999
          }}
        >
          üó®Ô∏è
          {unreadCount > 0 && (
            <span style={{
              position:'absolute', top:-5, right:-5,
              background:'red', color:'white',
              width:20, height:20, borderRadius:'50%',
              display:'flex', alignItems:'center',
              justifyContent:'center', fontSize:12
            }}>
              {unreadCount}
            </span>
          )}
        </div>
      )}
      {/* Chatbox */}
      {isChatOpen && (
        <div 
          className="chatbox" 
          style={{
            position: 'fixed', 
            bottom: '70px', 
            right: '20px', 
            width: '350px', 
            height: '500px', 
            background: '#fff', 
            border: '1px solid #ccc', 
            padding: '10px',
            borderRadius: '10px',
            boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',
            display: 'flex', 
            flexDirection: 'column',
            zIndex: 99999,  // ƒê·∫£m b·∫£o khung chat n·ªïi l√™n tr√™n c√°c ph·∫ßn t·ª≠ kh√°c
            maxHeight: '100vh',  // ƒê·∫£m b·∫£o khung chat kh√¥ng b·ªã che khu·∫•t n·∫øu trang c√≥ qu√° nhi·ªÅu n·ªôi dung
            overflow: 'auto',    // Cho ph√©p cu·ªôn khi n·ªôi dung chat qu√° d√†i
          }}
        >
          {/* N√∫t quay l·∫°i ·ªü g√≥c tr√°i */}
          {isAI !== null && (
            <button 
              onClick={handleBack}
              style={{
                position: 'absolute',
                top: '15px',
                left: '10px',
                padding: '5px',
                borderRadius: '5px',
                border: 'none',
                backgroundColor: '#f44336', 
                color: 'white',
                cursor: 'pointer',
              }}
            >
              <FaArrowLeft size={16} /> {/* Bi·ªÉu t∆∞·ª£ng quay l·∫°i */}
            </button>
          )}

          {/* Chat Header */}
          <div 
            className="chat-header"
            style={{
              display: 'flex', 
              justifyContent: 'center', 
              alignItems: 'center', 
              padding: '10px', 
              backgroundColor: '#6A1B9A',  // M√†u t√≠m cho header
              borderRadius: '5px', 
              marginBottom: '10px',
              color: 'white', // Ch·ªØ m√†u tr·∫Øng
            }}
          >
            <span style={{ fontWeight: 'bold' }}>FRUITOPIA</span> 
          </div>

          {/* Chat Options */}
          {isAI === null && (
            <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: '10px' }}>
              <button 
                onClick={() => setIsAI(true)} 
                style={{
                  backgroundColor: isAI === true ? '#4CAF50' : '#fff',  // Ch·ªçn n√∫t AI s·∫Ω c√≥ m√†u xanh l√°
                  padding: '8px',
                  border: 'none',
                  borderRadius: '5px',
                  color: isAI === true ? 'white' : 'black', // ƒê·ªïi m√†u ch·ªØ khi ch·ªçn
                  cursor: 'pointer',
                  width: '100%', // Gi√£n r·ªông n√∫t theo chi·ªÅu d·ªçc
                }}
              >
                Chat with AI
              </button>
              <button 
                onClick={handleSelectAdmin} 
                style={{
                  backgroundColor: isAI === false ? '#4CAF50' : '#fff',  // Ch·ªçn n√∫t Admin s·∫Ω c√≥ m√†u xanh l√°
                  fontWeight: unreadCount > 0 ? 'bold' : 'normal',
                  padding: '8px',
                  border: 'none',
                  borderRadius: '5px',
                  color: isAI === false ? 'white' : 'black',  // ƒê·ªïi m√†u ch·ªØ khi ch·ªçn
                  cursor: 'pointer',
                  width: '100%', // Gi√£n r·ªông n√∫t theo chi·ªÅu d·ªçc
                }}
              >
                Chat with Admin
              </button>
            </div>
          )}

          {/* Chat Container: only appears when user selects "Chat with AI" or "Chat with Admin" */}
          {isAI !== null && (
            <div>
              <div className="chat-box-messages" style={{ height: '300px', overflowY: 'auto', marginBottom: '10px' }} >
                
                {messages?.length === 0 && (
                  <div style={{
                    backgroundColor: isAI ? '#eee' : '#eee',
                    color: '#333',
                    padding: '8px 12px',
                    borderRadius: 16,
                    maxWidth: '80%',
                    margin: isAI ? '0 auto 12px' : '0  auto 12px',
                    fontStyle: 'italic',
                    whiteSpace: 'pre-wrap'
                  }}>
                    {isAI ? initialAIGreeting : initialAdminGreeting}
                  </div>
                )}
                {messages?.map((msg, idx) => {
                  const msgDate = new Date(msg.createdAt);
                  const prevMsgDate = idx > 0 ? new Date(messages[idx - 1].createdAt) : null;
                  const showDateHeader = idx === 0 || !isSameDay(msgDate, prevMsgDate);
                  const isClientMsg = msg.senderRole === 'client';

                  return (
                    <React.Fragment key={msg._id}>
                    {showDateHeader && (
                      <div
                        style={{
                          textAlign: 'center',
                          margin: '12px 0',
                          color: '#666',
                          fontSize: '0.85em'
                        }}
                      >
                        {formatDateHeader(msgDate)}
                      </div>
                    )}
                    <div
                      
                      style={{
                        display: 'flex',
                        justifyContent: isClientMsg ? 'flex-end' : 'flex-start',
                        margin: '6px 0'
                      }}
                    >
                      <div
                        style={{
                          backgroundColor: isClientMsg ? '#6A1B9A' : '#f1f0f0',
                          color: isClientMsg ? 'white' : 'black',
                          padding: '8px 12px',
                          borderRadius: 16,
                          maxWidth: '70%',
                          wordBreak: 'break-word'
                        }}
                      >
                        {msg.text}
                        {msg.image && (
                          <img
                            src={msg.image}
                            alt=""
                            style={{ width: '100%', borderRadius: 8, marginTop: 6 }}
                          />
                        )}

                        <div style={{
                          textAlign: 'right',
                          fontSize: '0.75em',
                          marginTop: 4,
                          color: isClientMsg ? 'rgba(255,255,255,0.7)' : '#999'
                        }}>
                          {new Date(msg.createdAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                        </div>
                      </div>
                    </div>
                    </React.Fragment>
                  );
                })}
                <div ref={messagesEndRef} />
              </div>

              {/* Chat Input */}
              
              <div style={{ display: 'flex', flexDirection: 'column', padding: 10, gap: 8 }}>
                {/* 1. Preview ·∫£nh n·∫øu ƒë√£ ch·ªçn */}
                {image && (
                  <div style={{ position: 'relative', width: 100 }}>
                    <img
                      src={URL.createObjectURL(image)}
                      alt="preview"
                      style={{ width: '100%', borderRadius: 5, objectFit: 'cover' }}
                    />
                    {/* N√∫t x√≥a preview */}
                    <button
                      onClick={() => setImage(null)}
                      style={{
                        position: 'absolute',
                        top: 2,
                        right: 2,
                        background: 'rgba(0,0,0,0.5)',
                        color: 'white',
                        border: 'none',
                        borderRadius: '50%',
                        width: 20,
                        height: 20,
                        cursor: 'pointer',
                      }}
                    >
                      √ó
                    </button>
                  </div>
                )}

                <div style={{ display: 'flex', alignItems: 'center', gap: 10, position: 'relative' }}>
                  <textarea
                    value={message}
                    onChange={(e) => setMessage(e.target.value)}
                    onKeyDown={e => {
                    if (e.key === 'Enter') {
                        e.preventDefault();       // ngƒÉn ƒë·ª´ng xu·ªëng d√≤ng
                        handleSendMessage();     // g·ª≠i tin
                      }
                    }}
                    onInput={e => {
                      // auto-grow
                      e.target.style.height = 'auto';
                      e.target.style.height = `${e.target.scrollHeight}px`;
                    }}
                    placeholder="Type a message..."
                    style={{ flex: 1,
                      padding: '8px 12px',
                      borderRadius: 5,
                      border: '1px solid #ccc',
                      resize: 'none',
                      maxHeight: 100,
                      lineHeight: 1.4,
                      overflowY: 'auto', }}
                  />

                  {/* N√∫t emoji */}
                  <button
                    onClick={() => setShowEmojiPicker(open => !open)}
                    style={{
                      background: 'transparent',
                      border: 'none',
                      cursor: 'pointer',
                      fontSize: '1.2rem',
                      transform: 'translateY(0px)',
                    }}
                  >
                    <FaSmile color="#6A1B9A" />
                  </button>

                  {/* Emoji Picker */}
                  {showEmojiPicker && (
                    <div style={{
                      position: 'absolute',
                      bottom: 'calc(100% + 10px)',
                      right: 40,
                      zIndex: 10000,
                    }}>
                      <EmojiPicker
                        onEmojiClick={onEmojiClick}
                        disableAutoFocus={true}
                        native
                        pickerStyle={{ boxShadow: '0 2px 8px rgba(0,0,0,0.15)', maxHeight: '250px', overflowY: 'auto', width: '320px' }}
                      />
                    </div>
                  )}

                  {/* 2. N√∫t ch·ªçn file */}
                  <label htmlFor="image-upload" style={{ cursor: 'pointer', padding: '6px 10px', display: 'flex',alignItems: 'center',justifyContent: 'center' , transform: 'translateY(6px)'}}>
                    <FaImage size={20} color="#6A1B9A" />
                  </label>
                  <input
                    id="image-upload"
                    type="file"
                    accept="image/*"
                    onChange={handleImageUpload}
                    style={{ display: 'none' }}  // v·∫´n ·∫©n input
                  />

                  <button
                    onClick={handleSendMessage}
                    style={{
                      background: '#6A1B9A',
                      color: 'white',
                      border: 'none',
                      padding: '6px 10px',
                      borderRadius: '5px',
                      cursor: 'pointer',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      transform: 'translateY(4px)',
                    }}
                  >
                    <FaPaperPlane size={18} />
                  </button>
                </div>
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
}

export default ClientChat;
